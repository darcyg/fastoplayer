IF(OS_WINDOWS)
  SET(RESOURCE_OS     "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}/win.rc")
  SET(RESOURCE_OS_IN  "${CMAKE_SOURCE_DIR}/install/${PROJECT_NAME_LOWERCASE}/windows/winres.rc.in")
  SET(ICON_FILE_IN    "${CMAKE_SOURCE_DIR}/install/${PROJECT_NAME_LOWERCASE}/windows/icon.ico")
ELSEIF(OS_MACOSX)
  SET(RESOURCE_OS     "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}/${PROJECT_NAME_LOWERCASE}.desktop")
  SET(RESOURCE_OS_IN  "${CMAKE_SOURCE_DIR}/install/${PROJECT_NAME_LOWERCASE}/desktop.in")
  SET(ICON_FILE_IN    "${CMAKE_SOURCE_DIR}/install/${PROJECT_NAME_LOWERCASE}/osx/icon.icns")
ELSEIF(OS_LINUX)
  SET(RESOURCE_OS     "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}/${PROJECT_NAME_LOWERCASE}.desktop")
  SET(RESOURCE_OS_IN  "${CMAKE_SOURCE_DIR}/install/${PROJECT_NAME_LOWERCASE}/desktop.in")
  SET(ICON_FILE_IN    "${CMAKE_SOURCE_DIR}/install/${PROJECT_NAME_LOWERCASE}/linux/icon.png")
ELSEIF(OS_FREEBSD)
  SET(RESOURCE_OS     "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}/${PROJECT_NAME_LOWERCASE}.desktop")
  SET(RESOURCE_OS_IN  "${CMAKE_SOURCE_DIR}/install/${PROJECT_NAME_LOWERCASE}/desktop.in")
  SET(ICON_FILE_IN    "${CMAKE_SOURCE_DIR}/install/${PROJECT_NAME_LOWERCASE}/linux/icon.png")
ELSEIF(OS_ANDROID)
  SET(RESOURCE_OS     "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}/${PROJECT_NAME_LOWERCASE}.desktop")
  SET(RESOURCE_OS_IN  "${CMAKE_SOURCE_DIR}/install/${PROJECT_NAME_LOWERCASE}/desktop.in")
  SET(ICON_FILE_IN    "${CMAKE_SOURCE_DIR}/install/${PROJECT_NAME_LOWERCASE}/android/icon.png")
ENDIF(OS_WINDOWS)
GET_FILENAME_COMPONENT(ICON_FILE_IN_EXTENSION ${ICON_FILE_IN} EXT)
SET(ICON_FILE ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}/${PROJECT_NAME_LOWERCASE}${ICON_FILE_IN_EXTENSION})
CONFIGURE_FILE("${ICON_FILE_IN}" "${ICON_FILE}" COPYONLY)

IF(OS_WINDOWS)
  SET(PLATFORM_HDRS)
  SET(PLATFORM_SRCS)
  SET(PLATFORM_LIBRARIES ws2_32 bcrypt)
ELSEIF(OS_MACOSX)
  SET(PLATFORM_HDRS)
  SET(PLATFORM_SRCS)
  SET(PLATFORM_LIBRARIES)
ELSEIF(OS_LINUX)
  SET(PLATFORM_HDRS)
  SET(PLATFORM_SRCS)
  SET(PLATFORM_LIBRARIES)
ELSEIF(OS_FREEBSD)
  SET(PLATFORM_HDRS)
  SET(PLATFORM_SRCS)
  SET(PLATFORM_LIBRARIES)
ENDIF(OS_WINDOWS)

IF(USE_PTHREAD)
  SET(PLATFORM_LIBRARIES ${PLATFORM_LIBRARIES} pthread)
ENDIF(USE_PTHREAD)

FIND_PACKAGE(CUDA QUIET)
IF(CUDA_FOUND)
  ADD_DEFINITIONS(-DHAVE_CUDA)
  SET(HAVE_CUVID 1)
  SET(CONFIG_CUVID 1)
  SET(DEPENDENS_INCLUDE_DIRS ${DEPENDENS_INCLUDE_DIRS} ${CUDA_INCLUDE_DIRS})
  SET(DEPENDENS_LIBRARIES ${DEPENDENS_LIBRARIES} ${CUDA_LIBRARIES})
ENDIF(CUDA_FOUND)

IF(OS_WINDOWS)
  FIND_PACKAGE(DirectX)
  IF(DirectX_FOUND)
    SET(DXVA2_FOUND ON)
    ADD_DEFINITIONS(-DHAVE_DXVA2)
    SET(HAVE_DXVA2_LIB 1)
    SET(CONFIG_DXVA2 1)
    SET(DEPENDENS_LIBRARIES ${DEPENDENS_LIBRARIES} ${DirectX_LIBRARIES})
    SET(DEPENDENS_INCLUDE_DIRS ${DEPENDENS_INCLUDE_DIRS} ${DIRECTX_INCLUDE_DIRS})
  ENDIF(DirectX_FOUND)
  SET(PLATFORM_HDRS ${PLATFORM_HDRS})
  SET(PLATFORM_SRCS ${PLATFORM_SRCS})
  SET(PLATFORM_LIBRARIES ${PLATFORM_LIBRARIES} secur32 vfw32 strmiids shlwapi)
ELSEIF(OS_MACOSX)
  FIND_LIBRARY(COCOA_LIBRARY Cocoa)
  FIND_LIBRARY(SECURITY_LIBRARY Security)
  FIND_LIBRARY(QTKIT_LIBRARY QTKit)
  FIND_LIBRARY(AVFOUNDATION_LIBRARY AvFoundation)
  FIND_LIBRARY(AUDIOTOOLBOX_LIBRARY AudioToolBox)
  FIND_LIBRARY(FOUNDATION_LIBRARY Foundation)
  FIND_LIBRARY(VIDEODECODE_LIBRARY VideoDecodeAcceleration)
  FIND_LIBRARY(QUARTZ_LIBRARY QuartzCore)
  FIND_LIBRARY(OPENGL_LIBRARY OpenGL)

  FIND_LIBRARY(COREMEDIA_LIBRARY CoreMedia)
  FIND_LIBRARY(COREVIDEO_LIBRARY CoreVideo)
  FIND_LIBRARY(CORESERVICES_LIBRARY CoreServices)
  IF(COREVIDEO_LIBRARY AND COREMEDIA_LIBRARY)
    SET(HAVE_UTGETOSTYPEFROMSTRING 1)
    SET(DEPENDENS_LIBRARIES ${DEPENDENS_LIBRARIES} ${CORESERVICES_LIBRARY})
  ENDIF(COREVIDEO_LIBRARY AND COREMEDIA_LIBRARY)

  FIND_LIBRARY(VIDEOTOOLBOX_LIBRARY VideoToolBox)
  IF (VIDEOTOOLBOX_LIBRARY)
    SET(VIDEOTOOLBOX_FOUND ON)
    SET(HAVE_VIDEOTOOLBOX 1)
    SET(CONFIG_VIDEOTOOLBOX 1)

    SET(DEPENDENS_LIBRARIES ${DEPENDENS_LIBRARIES} ${VIDEOTOOLBOX_LIBRARY})
  ENDIF(VIDEOTOOLBOX_LIBRARY)

  SET(PLATFORM_HDRS ${PLATFORM_HDRS})
  SET(PLATFORM_SRCS ${PLATFORM_SRCS})
  SET(PLATFORM_LIBRARIES
    ${PLATFORM_LIBRARIES}
    ${COCOA_LIBRARY}
    ${SECURITY_LIBRARY}
    ${QTKIT_LIBRARY}
    ${AVFOUNDATION_LIBRARY}
    ${AUDIOTOOLBOX_LIBRARY}
    ${COREVIDEO_LIBRARY}
    ${COREMEDIA_LIBRARY}
    ${FOUNDATION_LIBRARY}
    ${VIDEODECODE_LIBRARY}
    ${QUARTZ_LIBRARY}
    ${OPENGL_LIBRARY}
   )
ELSEIF(OS_LINUX)
  FIND_LIBRARY(VA_DRM_LIBRARY NAMES va-drm DOC "Path to va-drm library")
  IF(VA_DRM_LIBRARY)
    SET(DEPENDENS_LIBRARIES ${DEPENDENS_LIBRARIES} ${VA_DRM_LIBRARY})
  ENDIF(VA_DRM_LIBRARY)
  FIND_LIBRARY(VA_X11_LIBRARY NAMES va-x11 DOC "Path to va-x11 library")
  IF(VA_X11_LIBRARY)
    SET(HAVE_VAAPI_X11 1)
    SET(DEPENDENS_LIBRARIES ${DEPENDENS_LIBRARIES} ${VA_X11_LIBRARY})
  ENDIF(VA_X11_LIBRARY)

  FIND_PACKAGE(PkgConfig REQUIRED)

  FIND_PACKAGE(X11 QUIET)
  IF(X11_FOUND)
    SET(DEPENDENS_LIBRARIES ${DEPENDENS_LIBRARIES} ${X11_LIBRARIES})
    SET(DEPENDENS_INCLUDE_DIRS ${DEPENDENS_INCLUDE_DIRS} ${X11_INCLUDE_DIR})
  ENDIF(X11_FOUND)
  FIND_PACKAGE(ALSA QUIET)
  IF(ALSA_FOUND)
    SET(DEPENDENS_LIBRARIES ${DEPENDENS_LIBRARIES} ${ALSA_LIBRARY})
    SET(DEPENDENS_INCLUDE_DIRS ${DEPENDENS_INCLUDE_DIRS} ${ALSA_INCLUDE_DIR})
  ENDIF(ALSA_FOUND)
  FIND_PACKAGE(Xv QUIET)
  IF(XV_FOUND)
    SET(DEPENDENS_LIBRARIES ${DEPENDENS_LIBRARIES} ${XV_LIBRARIES})
    SET(DEPENDENS_INCLUDE_DIRS ${DEPENDENS_INCLUDE_DIRS} ${XV_INCLUDE_DIRS})
  ENDIF(XV_FOUND)

  # openmax
  FIND_LIBRARY(OPENMAXIL_LIBRARY
    NAMES openmaxil
    DOC "Path to OpenMAX IL library"
    PATHS /opt/vc/lib
  )
  FIND_PATH(OPENMAXIL_INCLUDE_DIR
    NAMES OMX_Core.h
    DOC "Openmax include directory"
    PATHS /opt/vc/include /opt/vc/include/IL
  )
  IF(OPENMAXIL_LIBRARY AND OPENMAXIL_INCLUDE_DIR)
    SET(CONFIG_OMX 1)
    SET(DEPENDENS_LIBRARIES ${DEPENDENS_LIBRARIES} ${OPENMAXIL_LIBRARY})
    SET(DEPENDENS_INCLUDE_DIRS ${DEPENDENS_INCLUDE_DIRS} ${OPENMAXIL_INCLUDE_DIR})
  ENDIF(OPENMAXIL_LIBRARY AND OPENMAXIL_INCLUDE_DIR)

  # broadcom
  FIND_LIBRARY(BCM_HOST_LIBRARY
    NAMES bcm_host
    DOC "Path to Broadcom host library"
    PATHS /opt/vc/lib
  )
  FIND_PATH(BROADCOM_INCLUDE_DIR
    NAMES bcm_host.h
    DOC "Broadcom include directory"
    PATHS /opt/vc/include
  )
  IF(BCM_HOST_LIBRARY AND BROADCOM_INCLUDE_DIR)
    SET(CONFIG_OMX_RPI 1)
    SET(DEPENDENS_LIBRARIES ${DEPENDENS_LIBRARIES} ${BCM_HOST_LIBRARY})
    SET(DEPENDENS_INCLUDE_DIRS ${DEPENDENS_INCLUDE_DIRS} ${BROADCOM_INCLUDE_DIR})

    # broadcom mmal
    FIND_LIBRARY(MMAL_CORE_LIBRARY
      NAMES mmal_core
      DOC "Path to Broadcom mmal core library"
      PATHS /opt/vc/lib
    )
    IF(MMAL_CORE_LIBRARY)
      SET(DEPENDENS_LIBRARIES ${DEPENDENS_LIBRARIES} ${MMAL_CORE_LIBRARY})
    ENDIF(MMAL_CORE_LIBRARY)

    FIND_LIBRARY(MMAL_UTIL_LIBRARY
      NAMES mmal_util
      DOC "Path to Broadcom mmal util library"
      PATHS /opt/vc/lib
    )
    IF(MMAL_UTIL_LIBRARY)
      SET(DEPENDENS_LIBRARIES ${DEPENDENS_LIBRARIES} ${MMAL_UTIL_LIBRARY})
    ENDIF(MMAL_UTIL_LIBRARY)

    FIND_LIBRARY(MMAL_VC_CLIENT_LIBRARY
      NAMES mmal_vc_client
      DOC "Path to Broadcom mmal vc client library"
      PATHS /opt/vc/lib
    )
    IF(MMAL_VC_CLIENT_LIBRARY)
      SET(DEPENDENS_LIBRARIES ${DEPENDENS_LIBRARIES} ${MMAL_VC_CLIENT_LIBRARY})
    ENDIF(MMAL_VC_CLIENT_LIBRARY)
  ENDIF(BCM_HOST_LIBRARY AND BROADCOM_INCLUDE_DIR)

  PKG_CHECK_MODULES(VDPAU vdpau)
  IF(VDPAU_FOUND)
    IF(VA_DRM_LIBRARY)
      SET(HAVE_VDPAU_DRM 1)
    ENDIF(VA_DRM_LIBRARY)
    IF(X11_FOUND)
      SET(HAVE_VDPAU_X11 1)
    ENDIF(X11_FOUND)
    ADD_DEFINITIONS(-DHAVE_VDPAU)
    SET(CONFIG_VDPAU 1)
    SET(DEPENDENS_INCLUDE_DIRS ${DEPENDENS_INCLUDE_DIRS} ${VDPAU_INCLUDE_DIRS})
    SET(DEPENDENS_LIBRARIES ${DEPENDENS_LIBRARIES} ${VDPAU_LIBRARIES})
  ENDIF(VDPAU_FOUND)

  PKG_CHECK_MODULES(VAAPI libva)
  IF(VAAPI_FOUND)
    IF(VA_DRM_LIBRARY)
      SET(HAVE_VAAPI_DRM 1)
    ENDIF(VA_DRM_LIBRARY)
    IF(X11_FOUND)
      SET(HAVE_VAAPI_X11 1)
    ENDIF(X11_FOUND)
    ADD_DEFINITIONS(-DHAVE_VAAPI)
    SET(HAVE_VAAPI 1)
    SET(CONFIG_VAAPI 1)
    SET(DEPENDENS_INCLUDE_DIRS ${DEPENDENS_INCLUDE_DIRS} ${VAAPI_INCLUDE_DIRS})
    SET(DEPENDENS_LIBRARIES ${DEPENDENS_LIBRARIES} ${VAAPI_LIBRARIES})
  ENDIF(VAAPI_FOUND)

  SET(PLATFORM_HDRS ${PLATFORM_HDRS})
  SET(PLATFORM_SRCS ${PLATFORM_SRCS})
  SET(PLATFORM_LIBRARIES ${PLATFORM_LIBRARIES} dl m)
ELSEIF(OS_FREEBSD)
  SET(PLATFORM_HDRS ${PLATFORM_HDRS})
  SET(PLATFORM_SRCS ${PLATFORM_SRCS})
  SET(PLATFORM_LIBRARIES ${PLATFORM_LIBRARIES})
ENDIF(OS_WINDOWS)

FIND_PACKAGE(Common REQUIRED)
FIND_PACKAGE(FFmpeg REQUIRED)
FIND_PACKAGE(OpenSSL REQUIRED)

IF(FFMPEG_LIBAVFILTER)
  SET(CONFIG_AVFILTER 1)
ENDIF(FFMPEG_LIBAVFILTER)
IF (NOT CONFIG_AVFILTER)
  MESSAGE(FATAL_ERROR "REQUEIRED AVFILER SUPPORT!!!")
ENDIF(NOT CONFIG_AVFILTER)
IF(FFMPEG_LIBAVDEVICE)
  SET(CONFIG_AVDEVICE 1)
ENDIF(FFMPEG_LIBAVDEVICE)
IF(FFMPEG_LIBAVUTIL)
  SET(CONFIG_AVUTIL 1)
ENDIF(FFMPEG_LIBAVUTIL)
IF(FFMPEG_LIBAVCODEC)
  SET(CONFIG_AVCODEC 1)
ENDIF(FFMPEG_LIBAVCODEC)
IF(FFMPEG_LIBAVFORMAT)
  SET(CONFIG_AVFORMAT 1)
ENDIF(FFMPEG_LIBAVFORMAT)
IF(FFMPEG_LIBSWSCALE)
  SET(CONFIG_SWSCALE 1)
ENDIF(FFMPEG_LIBSWSCALE)
IF(FFMPEG_LIBSWRESAMPLE)
  SET(CONFIG_SWRESAMPLE 1)
ENDIF(FFMPEG_LIBSWRESAMPLE)

IF(CUDA_FOUND)
  SET(BUILD_MEDIA_SOURCES ${BUILD_MEDIA_SOURCES} ${CMAKE_SOURCE_DIR}/src/player/media/hwaccels/ffmpeg_cuvid.cpp)
ENDIF(CUDA_FOUND)
IF(VIDEOTOOLBOX_FOUND)
  SET(BUILD_MEDIA_SOURCES ${BUILD_MEDIA_SOURCES} ${CMAKE_SOURCE_DIR}/src/player/media/hwaccels/ffmpeg_videotoolbox.cpp)
ENDIF(VIDEOTOOLBOX_FOUND)

SET(BUILD_MEDIA_SOURCES ${BUILD_MEDIA_SOURCES} ${CMAKE_SOURCE_DIR}/src/player/media/hwaccels/ffmpeg_hw.cpp)

SET(FFMPEG_CONFIG_GEN_PATH ${CMAKE_SOURCE_DIR}/include/player/media/ffmpeg_config.h)
CONFIGURE_FILE(${CMAKE_SOURCE_DIR}/src/player/media/ffmpeg_config.h.in ${FFMPEG_CONFIG_GEN_PATH} @ONLY IMMEDIATE)

SET(PLAYER_CONFIG_GEN_PATH ${CMAKE_SOURCE_DIR}/include/player/config.h)
CONFIGURE_FILE(${CMAKE_SOURCE_DIR}/src/player/config.h.in ${PLAYER_CONFIG_GEN_PATH} @ONLY IMMEDIATE)

SET(PLAYER_LIB_MEDIA_HEADERS
  ${CMAKE_SOURCE_DIR}/include/player/media/app_options.h
  ${CMAKE_SOURCE_DIR}/include/player/media/audio_params.h
  ${CMAKE_SOURCE_DIR}/include/player/media/av_utils.h
  ${CMAKE_SOURCE_DIR}/include/player/media/clock.h
  ${CMAKE_SOURCE_DIR}/include/player/media/decoder.h
  ${CMAKE_SOURCE_DIR}/include/player/media/ffmpeg_internal.h
  ${CMAKE_SOURCE_DIR}/include/player/media/frames/audio_frame.h
  ${CMAKE_SOURCE_DIR}/include/player/media/frames/base_frame.h
  ${CMAKE_SOURCE_DIR}/include/player/media/frames/frame_queue.h
  ${CMAKE_SOURCE_DIR}/include/player/media/frames/ring_buffer.h
  ${CMAKE_SOURCE_DIR}/include/player/media/frames/video_frame.h
  ${CMAKE_SOURCE_DIR}/include/player/media/packet_queue.h
  ${CMAKE_SOURCE_DIR}/include/player/media/stream.h
  ${CMAKE_SOURCE_DIR}/include/player/media/stream_statistic.h
  ${CMAKE_SOURCE_DIR}/include/player/media/types.h
  ${CMAKE_SOURCE_DIR}/include/player/media/video_state.h
  ${CMAKE_SOURCE_DIR}/include/player/media/video_state_handler.h
  ${FFMPEG_CONFIG_GEN_PATH}
)
SET(PLAYER_LIB_MEDIA_SOURCES
  ${CMAKE_SOURCE_DIR}/src/player/media/app_options.cpp
  ${CMAKE_SOURCE_DIR}/src/player/media/audio_params.cpp
  ${CMAKE_SOURCE_DIR}/src/player/media/av_utils.cpp
  ${CMAKE_SOURCE_DIR}/src/player/media/clock.cpp
  ${CMAKE_SOURCE_DIR}/src/player/media/decoder.cpp
  ${CMAKE_SOURCE_DIR}/src/player/media/ffmpeg_internal.cpp
  ${CMAKE_SOURCE_DIR}/src/player/media/frames/audio_frame.cpp
  ${CMAKE_SOURCE_DIR}/src/player/media/frames/base_frame.cpp
  ${CMAKE_SOURCE_DIR}/src/player/media/frames/frame_queue.cpp
  ${CMAKE_SOURCE_DIR}/src/player/media/frames/ring_buffer.cpp
  ${CMAKE_SOURCE_DIR}/src/player/media/frames/video_frame.cpp
  ${CMAKE_SOURCE_DIR}/src/player/media/packet_queue.cpp
  ${CMAKE_SOURCE_DIR}/src/player/media/stream.cpp
  ${CMAKE_SOURCE_DIR}/src/player/media/stream_statistic.cpp
  ${CMAKE_SOURCE_DIR}/src/player/media/types.cpp
  ${CMAKE_SOURCE_DIR}/src/player/media/video_state.cpp
  ${CMAKE_SOURCE_DIR}/src/player/media/video_state_handler.cpp

  ${BUILD_MEDIA_SOURCES}
)

SET(PLAYER_MEDIA_LIBRARY ${PROJECT_NAME_LOWERCASE}_media)
SET(MEDIA_PRIVATE_INCLUDE_DIRECTORIES)
SET(PLAYER_MEDIA_LIBRARY_LIBS
  ${FFMPEG_LIBRARIES}
  ${DEPENDENS_LIBRARIES}
  ${COMMON_LIBRARIES}
  ${PLATFORM_LIBRARIES}
  ${BZIP2_LIBRARIES}
  ${ZLIB_LIBRARY}
  ${OPENSSL_LIBRARIES}
)

ADD_LIBRARY(${PLAYER_MEDIA_LIBRARY} ${PLAYER_LIB_MEDIA_HEADERS} ${PLAYER_LIB_MEDIA_SOURCES})
TARGET_INCLUDE_DIRECTORIES(${PLAYER_MEDIA_LIBRARY}
  PRIVATE ${MEDIA_PRIVATE_INCLUDE_DIRECTORIES}
  PUBLIC $<BUILD_INTERFACE:${CMAKE_SOURCE_DIR}/include>
  $<INSTALL_INTERFACE:$<INSTALL_PREFIX>/${CMAKE_INSTALL_INCLUDEDIR}>
)
#SET_TARGET_PROPERTIES(${COMMON_PROJECT_NAME} PROPERTIES PUBLIC_HEADER "${COMMON_HEADERS}")
TARGET_LINK_LIBRARIES(${PLAYER_MEDIA_LIBRARY} PRIVATE ${PLAYER_MEDIA_LIBRARY_LIBS})

# player lib
IF(BUILD_PLAYER_LIB)
  FIND_PACKAGE(SDL2 REQUIRED)

  SET(PLAYER_LIB_HEADERS
    ${CMAKE_SOURCE_DIR}/include/player/draw/draw.h
    ${CMAKE_SOURCE_DIR}/include/player/draw/font.h
    ${CMAKE_SOURCE_DIR}/include/player/draw/surface_saver.h
    ${CMAKE_SOURCE_DIR}/include/player/draw/texture_saver.h
    ${CMAKE_SOURCE_DIR}/include/player/draw/types.h

    ${CMAKE_SOURCE_DIR}/include/player/gui/events/events.h
    ${CMAKE_SOURCE_DIR}/include/player/gui/events/key_events.h
    ${CMAKE_SOURCE_DIR}/include/player/gui/events/mouse_events.h
    ${CMAKE_SOURCE_DIR}/include/player/gui/events/window_events.h
    ${CMAKE_SOURCE_DIR}/include/player/gui/events_base.h
    ${CMAKE_SOURCE_DIR}/include/player/gui/lirc_events.h
    ${CMAKE_SOURCE_DIR}/include/player/gui/sdl2_application.h
    ${CMAKE_SOURCE_DIR}/include/player/gui/stream_events.h

    ${CMAKE_SOURCE_DIR}/include/player/gui/widgets/button.h
    ${CMAKE_SOURCE_DIR}/include/player/gui/widgets/font_window.h
    ${CMAKE_SOURCE_DIR}/include/player/gui/widgets/icon_label.h
    ${CMAKE_SOURCE_DIR}/include/player/gui/widgets/label.h
    ${CMAKE_SOURCE_DIR}/include/player/gui/widgets/line_edit.h
    ${CMAKE_SOURCE_DIR}/include/player/gui/widgets/list_box.h
    ${CMAKE_SOURCE_DIR}/include/player/gui/widgets/window.h

    ${CMAKE_SOURCE_DIR}/include/player/av_sdl_utils.h
    ${CMAKE_SOURCE_DIR}/include/player/tv_config.h
    ${CMAKE_SOURCE_DIR}/include/player/types.h
    ${CMAKE_SOURCE_DIR}/include/player/ffmpeg_application.h
    ${CMAKE_SOURCE_DIR}/include/player/isimple_player.h
    ${CMAKE_SOURCE_DIR}/include/player/player_options.h
    ${CMAKE_SOURCE_DIR}/include/player/sdl_utils.h
    ${CMAKE_SOURCE_DIR}/include/player/stream_handler.h

    ${PLAYER_CONFIG_GEN_PATH}
  )

  SET(PLAYER_LIB_SOURCES
    ${CMAKE_SOURCE_DIR}/src/player/draw/draw.cpp
    ${CMAKE_SOURCE_DIR}/src/player/draw/font.cpp
    ${CMAKE_SOURCE_DIR}/src/player/draw/surface_saver.cpp
    ${CMAKE_SOURCE_DIR}/src/player/draw/texture_saver.cpp
    ${CMAKE_SOURCE_DIR}/src/player/draw/types.cpp

    ${CMAKE_SOURCE_DIR}/src/player/gui/events/events.cpp
    ${CMAKE_SOURCE_DIR}/src/player/gui/events/key_events.cpp
    ${CMAKE_SOURCE_DIR}/src/player/gui/events/mouse_events.cpp
    ${CMAKE_SOURCE_DIR}/src/player/gui/events/window_events.cpp
    ${CMAKE_SOURCE_DIR}/src/player/gui/events_base.cpp
    ${CMAKE_SOURCE_DIR}/src/player/gui/lirc_events.cpp
    ${CMAKE_SOURCE_DIR}/src/player/gui/sdl2_application.cpp
    ${CMAKE_SOURCE_DIR}/src/player/gui/stream_events.cpp
    ${CMAKE_SOURCE_DIR}/src/player/gui/widgets/button.cpp
    ${CMAKE_SOURCE_DIR}/src/player/gui/widgets/font_window.cpp
    ${CMAKE_SOURCE_DIR}/src/player/gui/widgets/icon_label.cpp
    ${CMAKE_SOURCE_DIR}/src/player/gui/widgets/label.cpp
    ${CMAKE_SOURCE_DIR}/src/player/gui/widgets/line_edit.cpp
    ${CMAKE_SOURCE_DIR}/src/player/gui/widgets/list_box.cpp
    ${CMAKE_SOURCE_DIR}/src/player/gui/widgets/window.cpp

    ${CMAKE_SOURCE_DIR}/src/player/player_options.cpp
    ${CMAKE_SOURCE_DIR}/src/player/sdl_utils.cpp
    ${CMAKE_SOURCE_DIR}/src/player/stream_handler.cpp
    ${CMAKE_SOURCE_DIR}/src/player/av_sdl_utils.cpp
    ${CMAKE_SOURCE_DIR}/src/player/tv_config.cpp
    ${CMAKE_SOURCE_DIR}/src/player/types.cpp
    ${CMAKE_SOURCE_DIR}/src/player/ffmpeg_application.cpp
    ${CMAKE_SOURCE_DIR}/src/player/isimple_player.cpp
  )

  SET(PLAYER_LIBRARY ${PROJECT_NAME_LOWERCASE})
  SET(PRIVATE_INCLUDE_DIRECTORIES)
  SET(PLAYER_LIBRARY_LIBS
    ${PLAYER_MEDIA_LIBRARY}
    ${SDL2_LIBRARIES}
  )

  ADD_LIBRARY(${PLAYER_LIBRARY} ${PLAYER_LIB_HEADERS} ${PLAYER_LIB_SOURCES})
  TARGET_INCLUDE_DIRECTORIES(${PLAYER_LIBRARY}
    PRIVATE ${PRIVATE_INCLUDE_DIRECTORIES}
    PUBLIC $<BUILD_INTERFACE:${CMAKE_SOURCE_DIR}/include>
    $<INSTALL_INTERFACE:$<INSTALL_PREFIX>/${CMAKE_INSTALL_INCLUDEDIR}>
  )
  #SET_TARGET_PROPERTIES(${COMMON_PROJECT_NAME} PROPERTIES PUBLIC_HEADER "${COMMON_HEADERS}")
  TARGET_LINK_LIBRARIES(${PLAYER_LIBRARY} PRIVATE ${PLAYER_LIBRARY_LIBS})
ENDIF(BUILD_PLAYER_LIB)

IF(BUILD_PLAYER)
  IF(NOT BUILD_PLAYER_LIB)
    MESSAGE(FATAL_ERROR "Imposible to build player without main lib, please enable BUILD_PLAYER_LIB option.")
  ENDIF(NOT BUILD_PLAYER_LIB)
  SET_DESKTOP_TARGET()

  # Config
  SET(CONFIG_HWACCEL_METHOD "none" CACHE STRING "Hwaccel method")
  SET(CONFIG_WIDTH 0 CACHE STRING "Hwaccel method")
  SET(CONFIG_HEIGHT 0 CACHE STRING "Hwaccel method")
  SET(CONFIG_POWER_OFF_ON_EXIT OFF CACHE BOOL "Power off device on exit")

  SET(CONFIG_FILE_NAME ${PROJECT_NAME_LOWERCASE}.ini)
  IF(OS_WINDOWS)
    SET(EXECUTABLE_FOLDER_PATH ${TARGET_INSTALL_DESTINATION})
  ELSEIF(OS_MACOSX)
    SET(EXECUTABLE_FOLDER_PATH ${TARGET_INSTALL_DESTINATION})
  ELSEIF(OS_LINUX OR OS_FREEBSD)
    SET(EXECUTABLE_FOLDER_PATH /usr/bin)
  ENDIF(OS_WINDOWS)

  #config file
  SET(CONFIG_FILE_GENERATED_PATH "${CMAKE_CURRENT_BINARY_DIR}/${CONFIG_FILE_NAME}")
  CONFIGURE_FILE("${CMAKE_SOURCE_DIR}/install/${PROJECT_NAME_LOWERCASE}/config.ini.in"
    ${CONFIG_FILE_GENERATED_PATH} @ONLY IMMEDIATE)
  SET(CONFIG_FILE_PATH_RELATIVE ${SHARE_INSTALL_DESTINATION}/${CONFIG_FILE_NAME})

  SET(EXECUTABLE_PATH ${EXECUTABLE_FOLDER_PATH}/${PROJECT_NAME_LOWERCASE} CACHE INTERNAL
    "Executable path: ${EXECUTABLE_PATH}") # used for (deb/rpm/xinitrc)

  SET(APPLICATION_DIR "~/.${PROJECT_NAME_LOWERCASE}")
  SET(LOG_FILE_NAME "${PROJECT_NAME_LOWERCASE}.log")

  SET(PRIVATE_COMPILE_DEFINITIONS
    ${PRIVATE_COMPILE_DEFINITIONS}
    -DLOG_FILE_NAME="${LOG_FILE_NAME}"
    -DAPPLICATION_DIR="${APPLICATION_DIR}"

    -DCONFIG_FILE_NAME="${CONFIG_FILE_NAME}"
    -DCONFIG_FILE_PATH_RELATIVE="${CONFIG_FILE_PATH_RELATIVE}"
    -DRELATIVE_SOURCE_DIR="${RELATIVE_SOURCE_DIR}"
  )

  FIND_PACKAGE(PNG QUIET)
  SET(BUILD_PLAYER_SOURCES
    ${CMAKE_SOURCE_DIR}/src/load_config.h
    ${CMAKE_SOURCE_DIR}/src/load_config.cpp
    ${CMAKE_SOURCE_DIR}/src/cmdutils.h
    ${CMAKE_SOURCE_DIR}/src/cmdutils.cpp
  )

  SET(SIMPLE_PLAYER_SOURCES
    ${BUILD_PLAYER_SOURCES}
    ${CMAKE_SOURCE_DIR}/src/simple_player.h
    ${CMAKE_SOURCE_DIR}/src/simple_player.cpp
  )

  SET(EXE_PLAYER_SOURCES
    ${CMAKE_SOURCE_DIR}/src/player_main.cpp
    ${SIMPLE_PLAYER_SOURCES}
  )
  SET(OTHER_PLAYER_SOURCES ${ICON_FILE} ${RESOURCE_OS})
  SET(PLAYER_INCLUDE_DIRECTORIES
    ${DEPENDENS_CLIENT_INCLUDE_DIRS}
    ${COMMON_INCLUDE_DIR}
    ${SDL2_INCLUDE_DIRS}
    ${CMAKE_SOURCE_DIR}/include
    ${CMAKE_SOURCE_DIR}/src/third-party/ini
  )

  ADD_SUBDIRECTORY(${CMAKE_SOURCE_DIR}/src/third-party/ini inih)
  SET(PLAYER_LIBRARIES ${PLAYER_LIBRARY} inih)

  IF(MINGW OR CMAKE_COMPILER_IS_GNUCXX OR CMAKE_COMPILER_IS_CLANGCXX)
    ADD_EXECUTABLE(${PROJECT_NAME} ${DESKTOP_TARGET} ${EXE_PLAYER_SOURCES} ${OTHER_PLAYER_SOURCES})
    TARGET_COMPILE_DEFINITIONS(${PROJECT_NAME} PRIVATE ${PRIVATE_COMPILE_DEFINITIONS})
    TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} PRIVATE ${PLAYER_INCLUDE_DIRECTORIES})
    TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${PLAYER_LIBRARIES})
  ELSE()
    MESSAGE(FATAL_ERROR "NOT SUPPORTED COMPILER!!!")
  ENDIF(MINGW OR CMAKE_COMPILER_IS_GNUCXX OR CMAKE_COMPILER_IS_CLANGCXX)

  IF(OS_WINDOWS)
    SET_SOURCE_FILES_PROPERTIES(${RESOURCE_OS} PROPERTIES LANGUAGE RC)
  ELSEIF(OS_MACOSX)
    SET_SOURCE_FILES_PROPERTIES(${RESOURCE_OS} PROPERTIES MACOSX_PACKAGE_LOCATION Resources)
    SET_SOURCE_FILES_PROPERTIES(${ICON_FILE} PROPERTIES MACOSX_PACKAGE_LOCATION Resources)
  ENDIF(OS_WINDOWS)

  GET_FILENAME_COMPONENT(ICON_FILE_NAME ${ICON_FILE} NAME)
  IF(OS_MACOSX)
    SET(MACOSX_BUNDLE_BUNDLE_NAME ${BUNDLE_BASE_NAME})
    SET(MACOSX_BUNDLE_GUI_IDENTIFIER ${PROJECT_NAME})
    SET(MACOSX_BUNDLE_INFO_STRING "${PROJECT_VERSION},${PROJECT_COPYRIGHT}" )
    SET(MACOSX_BUNDLE_SHORT_VERSION_STRING "${SHORT_VERSION}" )
    SET(MACOSX_BUNDLE_LONG_VERSION_STRING ${PROJECT_VERSION})
    SET(MACOSX_BUNDLE_BUNDLE_VERSION ${PROJECT_VERSION})
    SET(MACOSX_BUNDLE_COPYRIGHT ${PROJECT_COPYRIGHT})
    SET(MACOSX_BUNDLE_ICON_FILE ${ICON_FILE_NAME})
    SET(MACOSX_BUNDLE_PRINCIPAL_CLASS "NSApplication")
    #SET(MACOSX_MAIN_NIB_FILE "MainMenu")
  ENDIF(OS_MACOSX)

  #prepare executable
  IF(PROJECT_BUILD_TYPE_VERSION STREQUAL "release")
    STRIP_TARGET(${PROJECT_NAME})
  ENDIF(PROJECT_BUILD_TYPE_VERSION STREQUAL "release")

  # Start to install
  VersionConf(${PROJECT_NAME} ${RESOURCE_OS_IN} ${RESOURCE_OS} ${ICON_FILE_NAME})
  INSTALL(TARGETS ${PROJECT_NAME} DESTINATION ${TARGET_INSTALL_DESTINATION} COMPONENT APPLICATIONS)
  INSTALL(FILES "${CMAKE_SOURCE_DIR}/LICENSE" DESTINATION . COMPONENT LICENSE RENAME LICENSE)
  INSTALL(FILES "${CMAKE_SOURCE_DIR}/install/${PROJECT_NAME_LOWERCASE}/COPYRIGHT" DESTINATION . COMPONENT LICENSE RENAME COPYRIGHT)
  INSTALL(FILES ${PROJECT_CHANGELOG_FILE} DESTINATION . COMPONENT LICENSE RENAME CHANGELOG)

  #share install
  INSTALL(FILES ${CONFIG_FILE_GENERATED_PATH} DESTINATION ${SHARE_INSTALL_DESTINATION} COMPONENT RUNTIME)
  INSTALL(DIRECTORY ${CMAKE_SOURCE_DIR}/install/${PROJECT_NAME_LOWERCASE}/resources DESTINATION
    ${SHARE_INSTALL_DESTINATION} COMPONENT RESOURCES)
  INSTALL(DIRECTORY ${CMAKE_SOURCE_DIR}/install/${PROJECT_NAME_LOWERCASE}/fonts DESTINATION
    ${SHARE_INSTALL_DESTINATION} COMPONENT RESOURCES)

  IF(OS_WINDOWS)
    #find runtime zlib
    SET(SHARED_ZLIB_NAMES zlib1.dll z.dll zlib.dll zdll.dll zlibd.dll zlibd1.dll)
    FIND_RUNTIME_LIBRARY(SHARED_ZLIB_LIBRARY SHARED_ZLIB_NAMES)
    INSTALL(FILES ${SHARED_ZLIB_LIBRARY} DESTINATION ${LIB_INSTALL_DESTINATION} COMPONENT RUNTIME)

    #find runtime bz
    SET(SHARED_BZ2_NAMES libbz2-1.dll)
    FIND_RUNTIME_LIBRARY(SHARED_BZ2_LIBRARY SHARED_BZ2_NAMES)
    INSTALL(FILES ${SHARED_BZ2_LIBRARY} DESTINATION ${LIB_INSTALL_DESTINATION} COMPONENT RUNTIME)

    #find runtime png
    SET(SHARED_PNG_NAMES libpng16-16.dll)
    FIND_RUNTIME_LIBRARY(SHARED_PNG_LIBRARY SHARED_PNG_NAMES)
    INSTALL(FILES ${SHARED_PNG_LIBRARY} DESTINATION ${LIB_INSTALL_DESTINATION} COMPONENT RUNTIME)

    #find runtime harfbuzz
    SET(SHARED_HARFBUZZ_NAMES libharfbuzz-0.dll)
    FIND_RUNTIME_LIBRARY(SHARED_HARFBUZZ_LIBRARY SHARED_HARFBUZZ_NAMES)
    INSTALL(FILES ${SHARED_HARFBUZZ_LIBRARY} DESTINATION ${LIB_INSTALL_DESTINATION} COMPONENT RUNTIME)

    #find runtime glib
    SET(SHARED_GLIB_NAMES libglib-2.0-0.dll)
    FIND_RUNTIME_LIBRARY(SHARED_GLIB_LIBRARY SHARED_GLIB_NAMES)
    INSTALL(FILES ${SHARED_GLIB_LIBRARY} DESTINATION ${LIB_INSTALL_DESTINATION} COMPONENT RUNTIME)

    #find runtime intl
    SET(SHARED_INTL_NAMES libintl-8.dll)
    FIND_RUNTIME_LIBRARY(SHARED_INTL_LIBRARY SHARED_INTL_NAMES)
    INSTALL(FILES ${SHARED_INTL_LIBRARY} DESTINATION ${LIB_INSTALL_DESTINATION} COMPONENT RUNTIME)

    #find runtime pcre
    SET(SHARED_PCRE_NAMES libpcre-1.dll)
    FIND_RUNTIME_LIBRARY(SHARED_PCRE_LIBRARY SHARED_PCRE_NAMES)
    INSTALL(FILES ${SHARED_PCRE_LIBRARY} DESTINATION ${LIB_INSTALL_DESTINATION} COMPONENT RUNTIME)

    #find runtime iconv
    SET(SHARED_ICONV_NAMES libiconv-2.dll)
    FIND_RUNTIME_LIBRARY(SHARED_ICONV_LIBRARY SHARED_ICONV_NAMES)
    INSTALL(FILES ${SHARED_ICONV_LIBRARY} DESTINATION ${LIB_INSTALL_DESTINATION} COMPONENT RUNTIME)

    #find runtime graphite2
    SET(SHARED_GRAPHITE2_NAMES libgraphite2.dll)
    FIND_RUNTIME_LIBRARY(SHARED_GRAPHITE2_LIBRARY SHARED_GRAPHITE2_NAMES)
    INSTALL(FILES ${SHARED_GRAPHITE2_LIBRARY} DESTINATION ${LIB_INSTALL_DESTINATION} COMPONENT RUNTIME)

    #find runtime freetype
    SET(SHARED_FREETYPE_NAMES libfreetype-6.dll)
    FIND_RUNTIME_LIBRARY(SHARED_FREETYPE_LIBRARY SHARED_FREETYPE_NAMES)
    INSTALL(FILES ${SHARED_FREETYPE_LIBRARY} DESTINATION ${LIB_INSTALL_DESTINATION} COMPONENT RUNTIME)

    #find runtime sdl2
    SET(SHARED_SDL2_NAMES SDL2.dll)
    FIND_RUNTIME_LIBRARY(SHARED_SDL2_LIBRARY SHARED_SDL2_NAMES)
    INSTALL(FILES ${SHARED_SDL2_LIBRARY} DESTINATION ${LIB_INSTALL_DESTINATION} COMPONENT RUNTIME)

    #find runtime sdl2 image
    SET(SHARED_SDL2_IMAGE_NAMES SDL2_image.dll)
    FIND_RUNTIME_LIBRARY(SHARED_SDL2_IMAGE_LIBRARY SHARED_SDL2_IMAGE_NAMES)
    INSTALL(FILES ${SHARED_SDL2_IMAGE_LIBRARY} DESTINATION ${LIB_INSTALL_DESTINATION} COMPONENT RUNTIME)

    #find runtime sdl2 ttf
    SET(SHARED_SDL2_TTF_NAMES SDL2_ttf.dll)
    FIND_RUNTIME_LIBRARY(SHARED_SDL2_TTF_LIBRARY SHARED_SDL2_TTF_NAMES)
    INSTALL(FILES ${SHARED_SDL2_TTF_LIBRARY} DESTINATION ${LIB_INSTALL_DESTINATION} COMPONENT RUNTIME)
  ELSEIF(OS_MACOSX)
    SET(BUNDLE_PATH "${CMAKE_INSTALL_PREFIX}/${BUNDLE_NAME}")
    INSTALL_LIB_TO_BUNDLE(${BUNDLE_NAME} ${SDL2_LIBRARY})
    INSTALL_LIB_TO_BUNDLE(${BUNDLE_NAME} ${SDL2_IMAGE_LIBRARY})
    INSTALL_LIB_TO_BUNDLE(${BUNDLE_NAME} ${SDL2_TTF_LIBRARY})
  ELSEIF(OS_LINUX OR OS_FREEBSD)
    GET_FILENAME_COMPONENT(LIBPNG_LIBRARY_WITHOUT_SYMLINK ${PNG_LIBRARY} REALPATH)
    GET_FILENAME_COMPONENT(LIBPNG_LIBRARY_NAME ${LIBPNG_LIBRARY_WITHOUT_SYMLINK} NAME)
    STRING(REGEX REPLACE "[^so]+$" ".16" LIBPNG_LNNAME ${LIBPNG_LIBRARY_NAME})
    #libpng16.so.16
    INSTALL(FILES ${LIBPNG_LIBRARY_WITHOUT_SYMLINK} DESTINATION ${LIB_INSTALL_DESTINATION} RENAME ${LIBPNG_LNNAME} COMPONENT RUNTIME)

    GET_FILENAME_COMPONENT(SDL2_LIBRARY_WITHOUT_SYMLINK ${SDL2_LIBRARY} REALPATH)
    GET_FILENAME_COMPONENT(SDL2_LIBRARY_NAME ${SDL2_LIBRARY_WITHOUT_SYMLINK} NAME)
    STRING(REGEX REPLACE "[^so]+$" ".0" SDL2_LNNAME ${SDL2_LIBRARY_NAME})
    #libSDL2-2.0.so.0
    INSTALL(FILES ${SDL2_LIBRARY_WITHOUT_SYMLINK} DESTINATION ${LIB_INSTALL_DESTINATION} RENAME ${SDL2_LNNAME} COMPONENT RUNTIME)

    GET_FILENAME_COMPONENT(SDL2_IMAGE_LIBRARY_WITHOUT_SYMLINK ${SDL2_IMAGE_LIBRARY} REALPATH)
    GET_FILENAME_COMPONENT(SDL2_IMAGE_LIBRARY_NAME ${SDL2_IMAGE_LIBRARY_WITHOUT_SYMLINK} NAME)
    STRING(REGEX REPLACE "[^so]+$" ".0" SDL2_IMAGE_LNNAME ${SDL2_IMAGE_LIBRARY_NAME})
    #libSDL2_image-2.0.so.0
    INSTALL(FILES ${SDL2_IMAGE_LIBRARY_WITHOUT_SYMLINK} DESTINATION ${LIB_INSTALL_DESTINATION} RENAME ${SDL2_IMAGE_LNNAME} COMPONENT RUNTIME)

    GET_FILENAME_COMPONENT(SDL2_TTF_LIBRARY_WITHOUT_SYMLINK ${SDL2_TTF_LIBRARY} REALPATH)
    GET_FILENAME_COMPONENT(SDL2_TTF_LIBRARY_NAME ${SDL2_TTF_LIBRARY_WITHOUT_SYMLINK} NAME)
    STRING(REGEX REPLACE "[^so]+$" ".0" SDL2_TTF_LNNAME ${SDL2_TTF_LIBRARY_NAME})
    #libSDL2_ttf-2.0.so.0
    INSTALL(FILES ${SDL2_TTF_LIBRARY_WITHOUT_SYMLINK} DESTINATION ${LIB_INSTALL_DESTINATION} RENAME ${SDL2_TTF_LNNAME} COMPONENT RUNTIME)

    # exe script
    SET(START_SCRIPT_PLAYER_GENERATED_PATH "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}/${PROJECT_NAME_LOWERCASE}")
    GEN_START_SCRIPT(${START_SCRIPT_PLAYER_GENERATED_PATH} ${PROJECT_NAME})
    INSTALL(PROGRAMS ${START_SCRIPT_PLAYER_GENERATED_PATH} DESTINATION ${TARGET_INSTALL_DESTINATION})

    #share resources

    #xinitrc script
    SET(XINITRC_SCRIPT_GENERATED_PATH "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}/xinitrc")
    CONFIGURE_FILE("${CMAKE_SOURCE_DIR}/install/${PROJECT_NAME_LOWERCASE}/linux/xinitrc.in"
      ${XINITRC_SCRIPT_GENERATED_PATH} @ONLY IMMEDIATE)
    INSTALL(FILES ${XINITRC_SCRIPT_GENERATED_PATH} DESTINATION ${SHARE_INSTALL_DESTINATION} COMPONENT RESOURCES)

    # auto_start script
    SET(AURO_START_SCRIPT_GENERATED_PATH "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}/autostart_${PROJECT_NAME_LOWERCASE}")
    CONFIGURE_FILE("${CMAKE_SOURCE_DIR}/install/${PROJECT_NAME_LOWERCASE}/autostart.sh.in"
      ${AURO_START_SCRIPT_GENERATED_PATH} @ONLY IMMEDIATE)
    INSTALL(PROGRAMS ${AURO_START_SCRIPT_GENERATED_PATH} DESTINATION ${SHARE_INSTALL_DESTINATION})

    INSTALL(FILES ${RESOURCE_OS} DESTINATION ${SHARE_INSTALL_DESTINATION}/applications COMPONENT RESOURCES)
    INSTALL(FILES ${ICON_FILE} DESTINATION ${SHARE_INSTALL_DESTINATION}/icons COMPONENT RESOURCES)
  ENDIF(OS_WINDOWS)

  INSTALL_RUNTIME_LIBRARIES()
ENDIF(BUILD_PLAYER)

SET(HEADERS_INSTALL_LIB_DESTINATION include)
INSTALL(TARGETS ${PLAYER_MEDIA_LIBRARY} ${PLAYER_LIBRARY}
    LIBRARY DESTINATION lib
    ARCHIVE DESTINATION lib
#   PUBLIC_HEADER DESTINATION include/player
)
INSTALL(DIRECTORY ${CMAKE_SOURCE_DIR}/include/player DESTINATION ${HEADERS_INSTALL_LIB_DESTINATION})

IF (DEVELOPER_CHECK_STYLE)
  SET(CHECK_SOURCES_PLAYER
    ${PLAYER_LIB_MEDIA_HEADERS} ${PLAYER_LIB_MEDIA_SOURCES}
    ${PLAYER_LIB_HEADERS} ${PLAYER_LIB_SOURCES}
    ${EXE_PLAYER_SOURCES} ${OTHER_PLAYER_SOURCES}
  )
  REGISTER_CHECK_STYLE_TARGET(check_style_player "${CHECK_SOURCES_PLAYER}")
ENDIF(DEVELOPER_CHECK_STYLE)

IF(DEVELOPER_ENABLE_TESTS)
  ADD_DEFINITIONS(-DPROJECT_TEST_SOURCES_DIR="${CMAKE_SOURCE_DIR}/tests")

  SET(VIDEO_STATE_TEST video_state_test)
  ADD_EXECUTABLE(${VIDEO_STATE_TEST}
    ${CMAKE_SOURCE_DIR}/tests/video_state_test.cpp
  )
  TARGET_INCLUDE_DIRECTORIES(${VIDEO_STATE_TEST} PRIVATE
    ${CMAKE_SOURCE_DIR}/include
    ${COMMON_INCLUDE_DIR}
  )
  TARGET_LINK_LIBRARIES(${VIDEO_STATE_TEST}
    ${PLAYER_MEDIA_LIBRARY}
  )

  IF(BUILD_PLAYER_LIB)
    SET(PROJECT_VIDEO_PERFORMANCE_TEST video_performance_test)
    ADD_EXECUTABLE(${PROJECT_VIDEO_PERFORMANCE_TEST}
      ${CMAKE_SOURCE_DIR}/tests/video_performance_test.cpp
      ${CMAKE_SOURCE_DIR}/src/player/sdl_utils.cpp
    )
    TARGET_INCLUDE_DIRECTORIES(${PROJECT_VIDEO_PERFORMANCE_TEST} PRIVATE
      ${CMAKE_SOURCE_DIR}/include
      ${COMMON_INCLUDE_DIR}
    )
    TARGET_LINK_LIBRARIES(${PROJECT_VIDEO_PERFORMANCE_TEST}
      ${PLAYER_LIBRARY}
    )
  ENDIF(BUILD_PLAYER_LIB)
ENDIF(DEVELOPER_ENABLE_TESTS)
